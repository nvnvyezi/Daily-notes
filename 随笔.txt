Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2018-06-12T22:13:36+08:00

====== 随笔 ======
创建日期 星期二 12 六月 2018

数字输入框，滑动输入条完后了　ｇｒｉｄ

**IOS APP中，使用h5播放器，默认打开网页的时候，会自动全屏，解决方法webkit-playsinline**

__<video src="1.mp4" webkit-playsinline playsinline x5-playsinline x-webkit-airplay="allow"></video>__  


http://wps-community.org/download.html

1.进入WPS官网下载最新版安装包及字体文件，当前最新的是wps-office_10.1.0.5707~a21_amd64.deb和wps-office-fonts_1.0_all.deb； 
2.下载libpng12-0；
wget http://ftp.cn.debian.org/debian/pool/main/libp/libpng/libpng12-0_1.2.49-1+deb7u2_amd64.deb
$ sudo dpkg -i libpng12-0_1.2.49-1+deb7u2_amd64.deb
$ sudo dpkg -i wps-office_10.1.0.5707-a21_amd64.deb
$ sudo dpkg -i wps-office-fonts_1.0_all.deb


===== props =====

**type能够指定的类型**
**type可以是以下原生类型：**

String,Number,Boolean,Function,Object,Array,Symbol
**required**
可以使用required选项来声明这个参数是否必须传入。
**default(当type的类型为Array或者Object的时候default必须是一个函数：)**
使用default选项来指定当父组件未传入参数时props变量的默认值：
**validator**
当校验规则很复杂，默认提供的校验规则无法满足的时候可以使用自定义函数来校验。

 __1 props: {__
__ 2     // fooA只接受数值类型的参数__
__ 3     fooA: Number,__
__ 4     // fooB可以接受字符串和数值类型的参数__
__ 5     fooB: [String, Number],__
__ 6     // fooC可以接受字符串类型的参数，并且这个参数必须传入__
__ 7     fooC: {__
__ 8         type: String,__
__ 9         required: true__
__10     },__
__11     // fooD接受数值类型的参数，如果不传入的话默认就是100__
__12     fooD: {__
__13         type: Number,__
__14         default: 100__
__15     },__
__16     // fooE接受对象类型的参数__
__17     fooE: {__
__18         type: Object,__
__19         // 当为对象类型设置默认值时必须使用函数返回__
__20         default: function(){__
__21             return { message: 'Hello, world' }__
__22         }__
__23     },__
__24     // fooF使用一个自定义的验证器__
__25     fooF: {__
__26         validator: function(value){__
__27             return value>=0 && value<=100;__
__28         }__
__29     }__
__30 }__


包相关命令：

清除无用包：apt-get clean && apt-get autoclean 　　#一般用apt-get autoclean就够了

更新源：apt-get update　　　　#同步 /etc/apt/sources.list 源的索引，这样才知道是不是有最新的包

更新包：apt-get upgrade　　　#更新所有已安装的软件（upgrade只是简单的更新包，不管这些依赖，它不添不删。）

更新包2：apt-get dist-upgrade　#包与包之间存在各种依赖关系。而dist-upgrade可以根据依赖关系的变化添删包。（依赖有时会出错，建议新手谨慎使用）

补充：在执行 upgrade or dist-upgrade 之前一定要执行 update, 这样才能获取最新

安装软件：apt-get install XXX [--reinstall]　#--reinstall 是重新安装包，一般都是用 apt-get install XXX

修复依赖：apt-get -f install　　　　　　　#修复依赖，类似于win里面的缺少dll，-f之后他帮你修复安装一些依赖（安装搜狗拼音实例有用到）

删除软件：apt-get remove XXX [--purge]　#--purge 卸载的时候把配置文件也删了，完全删除包可以用这个选项：apt-get remove XXX --purge



单向数据绑定

优点：
 *1. 所有状态的改变可记录、可跟踪，源头易追溯;*
 *2. 所有数据只有一份，组件数据只有唯一的入口和出口，使得程序更直观更容易理解，有利于应用的可维护性;*
 *3. 一旦数据变化，就去更新页面(data-页面)，但是没有(页面-data);*
 *4. 如果用户在页面上做了变动，那么就手动收集起来(双向是自动)，合并到原有的数据中。*
 [方神：双向绑定 = 单向绑定 + UI事件监听，可了解vuex](https://link.jianshu.com?t=http://www.cnblogs.com/luoqian/p/6440146.html)
 缺点：
 *1. HTML代码渲染完成，无法改变，有新数据，就须把旧HTML代码去掉，整合新数据和模板重新渲染;*
 *2. 代码量上升，数据流转过程变长，出现很多类似的样板代码;*
 *3. 同时由于对应用状态独立管理的严格要求(单一的全局store)，在处理局部状态较多的场景时(如用户输入交互较多的“富表单型”应用)，会显得啰嗦及繁琐。*

 双向数据绑定

优点：
 *1. 用户在视图上的修改会自动同步到数据模型中去，数据模型中值的变化也会立刻同步到视图中去；*
 *2. 无需进行和单向数据绑定的那些CRUD（Create，Retrieve，Update，Delete）操作；*
 *3. 在表单交互较多的场景下，会简化大量业务无关的代码。*
 缺点：
 *1. 无法追踪局部状态的变化；*
 *2. “暗箱操作”，增加了出错时 debug 的难度；*
 *3. 由于组件数据变化来源入口变得可能不止一个，数据流转方向易紊乱，若再缺乏“管制”手段，血崩。*

 

 

 

 

​     **unar常用选项解释**

-o

> 解释：指定解压结果保存的位置 
> `unar document.zip -o /home/dir/`

-e

> 解释：指定编码 
> `unar -e GBK document.zip`

-p

> 解释：指定解压密码 
> `unar -p 123456 document.zip`

  ---------------------  本文来自 申鹏啊 的CSDN 博客 ，全文地址请点击：https://blog.csdn.net/Allan_Bst/article/details/79007010?utm_source=copy



```js
function Node(data) {
  this.left = null;
  this.right = null;
  this.data = data;
}
let root = null;

function build(t, data) {
  // if (root === null) {
  //   root = true;
  //   t = new Node(data);
  // } else {
    if (data < t.data) {
      if (t.left === null) {
        t.left = new Node(data);
      } else {
        build(t.left, data);
      }
    } else {
      if (t.right === null) {
        t.right = new Node(data);
      } else {
        build(t.right, data);
      }
    }
  // }
}

const bTree = new Node(7);
let arr = [5, 9, 4, 6, 8, 10];
for (let i = 0; i < arr.length; i++) {
  const element = arr[i];
  build(bTree, element)
}

function pre(tree) {
  if (tree !== null) {
    console.log(tree.data);
    pre(tree.left);
    pre(tree.right);
  }
}
function preOrder(tree) {
  let arr = [];
  let temp;
  temp = tree;
  do {
    while (temp) {
      console.log(temp.data);
      arr.push(temp);
      temp = temp.left;
    }
    temp = arr.pop();
    temp = temp.right;
  } while (arr.length || temp);
}
function inOrder(tree) {
  let arr = [];
  temp = tree;
  // arr.push(tree);
  do {
    while (temp !== null) {
      arr.push(temp);
      temp = temp.left;
    }
    temp = arr.pop();
    console.log(temp.data);
    temp = temp.right;
  } while (arr.length || temp);
}
function postOrder(tree) {
  let arr = [];
  let temp, pre = null;
  temp = tree;
  do {
    while (temp) {
      arr.push(temp);
      temp = temp.left;
    }
    temp = arr[arr.length - 1];
    if (temp.right && temp.right !== pre) {
      temp = temp.right;
    } else{
      temp = arr.pop();
      pre = temp;
      console.log(temp.data);
      temp = temp.right;
    }
    // temp = 
  } while (arr.length || temp);
}
function post (tree) {
  if (tree) {
    post(tree.left);
    post(tree.right);
    console.log(tree.data);
  }
}
function lerverOrder(tree) {
  let arr = [];
  arr.push(tree);
  let temp;
  while (arr.length) {
    temp = arr.shift();
    console.log(temp.data);
    if (temp.left) {
      arr.push(temp.left);
    }
    if (temp.right) {
      arr.push(temp.right);
    }
  }
}

// inO(bTree);
// inOrder(bTree);
// lerverOrder(bTree);
// preOrder(bTree)
// postOrder(bTree)
post(bTree);
```

  